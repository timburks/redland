//
//  RedlandWorld.h
//  Redland Objective-C Bindings
//  $Id: RedlandWorld.h 313 2004-11-03 19:00:40Z kianga $
//
//  Copyright 2004 Rene Puls <http://purl.org/net/kianga/>
//
//  This file is available under the following three licenses:
//   1. GNU Lesser General Public License (LGPL), version 2.1
//   2. GNU General Public License (GPL), version 2
//   3. Apache License, version 2.0
//
//  You may not use this file except in compliance with at least one of
//  the above three licenses. See LICENSE.txt at the top of this package
//  for the complete terms and further details.
//
//  The most recent version of this software can be found here:
//  <http://purl.org/net/kianga/latest/redland-objc>
//
//  For information about the Redland RDF Application Framework, including
//  the most recent version, see <http://librdf.org/>.
//

/*!
	@header RedlandWorld.h
	Defines the RedlandWorld class.
*/

#import <Foundation/Foundation.h>
#import "redland.h"
#import "RedlandWrappedObject.h"

@class RedlandNode;

/*!
	@class RedlandWorld 
	@abstract Global context for all Redland functions.
	@discussion Wraps librdf_world objects. This framework takes care of creating a RedlandWorld instance for you. There is currently no way to create an instance manually in this version of the framework, and all operations currently use the default instance.
*/
@interface RedlandWorld : RedlandWrappedObject {
    NSError *lastError;
    NSMutableArray *storedErrors;
	BOOL logsErrors;
}

/*!
	@method defaultWorld
	@abstract Returns the default RedlandWorld instance.
*/
+ (RedlandWorld *)defaultWorld;

/*!
	@method defaultWrappedWorld
	@abstract Returns the underlying librdf_world pointer of the default RedlandWorld instance.
*/
+ (librdf_world *)defaultWrappedWorld;

/*!
	@method wrappedWorld
	@abstract Returns the underlying librdf_world pointer of the receiver.
*/
- (librdf_world *)wrappedWorld;

/*!
	@method handleLogMessage:
	@param aMessage A librdf_log_message pointer.
	@abstract This method is used internally to process log messages generated by the Redland library. All messages are stored in an internal array until they are handled.
	@availability Behavior of this method is subject to change. Do not use.
*/
- (int)handleLogMessage:(librdf_log_message *)aMessage;

/*!
	@method handleStoredErrors
	@abstract Checks if there are stored messages and generates a RedlandException is this is the case.
	@availability Behavior of this method is subject to change. Do not use.
*/
- (void)handleStoredErrors;

/*!
    @method logsErrors
    @abstract Returns TRUE if the receiver logs errors to the console.
*/
- (BOOL)logsErrors;

/*!
    @method setLogsErrors:
    @abstract If flag is TRUE, the receiver will log all Redland errors to the console (in addition to generating exceptions, where appropriate). By default, errors are NOT logged to the console.
*/
- (void)setLogsErrors:(BOOL)flag;

/*!
	@method valueOfFeature:
	@abstract Returns the value of the world feature identified by featureURI.
	@param featureURI An NSString or a RedlandURI instance
*/
- (RedlandNode *)valueOfFeature:(id)featureURI;

/*!
	@method setValue:ofFeature:
	@abstract Sets the world feature identified by featureURI to a new value.
	@param featureValue A RedlandNode representing the new value
	@param featureURI An NSString or a RedlandURI instance
	@discussion Raises a RedlandException is no such feature exists.
*/
- (void)setValue:(RedlandNode *)featureValue ofFeature:(id)featureURI;
@end
